# Generated from LALexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,341,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,24,8,0,10,0,12,0,27,
        9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,249,8,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,275,8,3,1,4,1,4,5,4,279,8,4,
        10,4,12,4,282,9,4,1,4,1,4,1,5,3,5,287,8,5,1,5,4,5,290,8,5,11,5,12,
        5,291,1,6,3,6,295,8,6,1,6,4,6,298,8,6,11,6,12,6,299,1,6,1,6,4,6,
        304,8,6,11,6,12,6,305,3,6,308,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,327,8,7,1,8,1,8,1,8,1,
        8,3,8,333,8,8,1,9,1,9,5,9,337,8,9,10,9,12,9,340,9,9,0,0,10,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,9,1,0,125,125,3,0,9,
        10,13,13,32,32,1,0,34,34,2,0,43,43,45,45,8,0,42,43,45,45,47,47,58,
        58,60,60,62,62,91,91,93,93,2,0,37,38,94,94,3,0,40,41,44,44,58,58,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,391,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,
        3,32,1,0,0,0,5,248,1,0,0,0,7,274,1,0,0,0,9,276,1,0,0,0,11,286,1,
        0,0,0,13,294,1,0,0,0,15,326,1,0,0,0,17,332,1,0,0,0,19,334,1,0,0,
        0,21,25,5,123,0,0,22,24,8,0,0,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,
        1,0,0,0,25,26,1,0,0,0,26,28,1,0,0,0,27,25,1,0,0,0,28,29,5,125,0,
        0,29,30,1,0,0,0,30,31,6,0,0,0,31,2,1,0,0,0,32,33,7,1,0,0,33,34,1,
        0,0,0,34,35,6,1,0,0,35,4,1,0,0,0,36,37,5,118,0,0,37,38,5,97,0,0,
        38,249,5,114,0,0,39,40,5,99,0,0,40,41,5,111,0,0,41,42,5,110,0,0,
        42,43,5,115,0,0,43,44,5,116,0,0,44,45,5,97,0,0,45,46,5,110,0,0,46,
        47,5,116,0,0,47,249,5,101,0,0,48,49,5,112,0,0,49,50,5,114,0,0,50,
        51,5,111,0,0,51,52,5,99,0,0,52,53,5,101,0,0,53,54,5,100,0,0,54,55,
        5,105,0,0,55,56,5,109,0,0,56,57,5,101,0,0,57,58,5,110,0,0,58,59,
        5,116,0,0,59,249,5,111,0,0,60,61,5,112,0,0,61,62,5,114,0,0,62,63,
        5,111,0,0,63,64,5,99,0,0,64,65,5,101,0,0,65,66,5,100,0,0,66,67,5,
        105,0,0,67,68,5,109,0,0,68,69,5,101,0,0,69,70,5,110,0,0,70,71,5,
        116,0,0,71,249,5,111,0,0,72,73,5,102,0,0,73,74,5,105,0,0,74,75,5,
        109,0,0,75,76,5,95,0,0,76,77,5,112,0,0,77,78,5,114,0,0,78,79,5,111,
        0,0,79,80,5,99,0,0,80,81,5,101,0,0,81,82,5,100,0,0,82,83,5,105,0,
        0,83,84,5,109,0,0,84,85,5,101,0,0,85,86,5,110,0,0,86,87,5,116,0,
        0,87,249,5,111,0,0,88,89,5,102,0,0,89,90,5,117,0,0,90,91,5,110,0,
        0,91,92,5,99,0,0,92,93,5,97,0,0,93,249,5,111,0,0,94,95,5,114,0,0,
        95,96,5,101,0,0,96,97,5,116,0,0,97,98,5,111,0,0,98,99,5,114,0,0,
        99,100,5,110,0,0,100,249,5,101,0,0,101,102,5,102,0,0,102,103,5,105,
        0,0,103,104,5,109,0,0,104,105,5,95,0,0,105,106,5,102,0,0,106,107,
        5,117,0,0,107,108,5,110,0,0,108,109,5,99,0,0,109,110,5,97,0,0,110,
        249,5,111,0,0,111,112,5,116,0,0,112,113,5,105,0,0,113,114,5,112,
        0,0,114,249,5,111,0,0,115,116,5,102,0,0,116,117,5,105,0,0,117,118,
        5,109,0,0,118,119,5,95,0,0,119,120,5,97,0,0,120,121,5,108,0,0,121,
        122,5,103,0,0,122,123,5,111,0,0,123,124,5,114,0,0,124,125,5,105,
        0,0,125,126,5,116,0,0,126,127,5,109,0,0,127,249,5,111,0,0,128,129,
        5,97,0,0,129,130,5,108,0,0,130,131,5,103,0,0,131,132,5,111,0,0,132,
        133,5,114,0,0,133,134,5,105,0,0,134,135,5,116,0,0,135,136,5,109,
        0,0,136,249,5,111,0,0,137,138,5,100,0,0,138,139,5,101,0,0,139,140,
        5,99,0,0,140,141,5,108,0,0,141,142,5,97,0,0,142,143,5,114,0,0,143,
        249,5,101,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,147,5,105,
        0,0,147,249,5,97,0,0,148,149,5,101,0,0,149,150,5,115,0,0,150,151,
        5,99,0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,154,5,118,0,0,154,
        249,5,97,0,0,155,156,5,115,0,0,156,249,5,101,0,0,157,158,5,115,0,
        0,158,159,5,101,0,0,159,160,5,110,0,0,160,161,5,97,0,0,161,249,5,
        111,0,0,162,163,5,101,0,0,163,164,5,110,0,0,164,165,5,116,0,0,165,
        166,5,97,0,0,166,249,5,111,0,0,167,168,5,102,0,0,168,169,5,105,0,
        0,169,170,5,109,0,0,170,171,5,95,0,0,171,172,5,115,0,0,172,249,5,
        101,0,0,173,174,5,99,0,0,174,175,5,97,0,0,175,176,5,115,0,0,176,
        249,5,111,0,0,177,178,5,102,0,0,178,179,5,105,0,0,179,180,5,109,
        0,0,180,181,5,95,0,0,181,182,5,99,0,0,182,183,5,97,0,0,183,184,5,
        115,0,0,184,249,5,111,0,0,185,186,5,115,0,0,186,187,5,101,0,0,187,
        188,5,106,0,0,188,249,5,97,0,0,189,190,5,112,0,0,190,191,5,97,0,
        0,191,192,5,114,0,0,192,249,5,97,0,0,193,194,5,97,0,0,194,195,5,
        116,0,0,195,249,5,101,0,0,196,197,5,102,0,0,197,198,5,97,0,0,198,
        199,5,99,0,0,199,249,5,97,0,0,200,201,5,102,0,0,201,202,5,105,0,
        0,202,203,5,109,0,0,203,204,5,95,0,0,204,205,5,112,0,0,205,206,5,
        97,0,0,206,207,5,114,0,0,207,249,5,97,0,0,208,209,5,102,0,0,209,
        210,5,105,0,0,210,211,5,109,0,0,211,212,5,95,0,0,212,213,5,101,0,
        0,213,214,5,110,0,0,214,215,5,113,0,0,215,216,5,117,0,0,216,217,
        5,97,0,0,217,218,5,110,0,0,218,219,5,116,0,0,219,249,5,111,0,0,220,
        221,5,101,0,0,221,222,5,110,0,0,222,223,5,113,0,0,223,224,5,117,
        0,0,224,225,5,97,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,249,
        5,111,0,0,228,229,5,114,0,0,229,230,5,101,0,0,230,231,5,103,0,0,
        231,232,5,105,0,0,232,233,5,115,0,0,233,234,5,116,0,0,234,235,5,
        114,0,0,235,249,5,111,0,0,236,237,5,102,0,0,237,238,5,105,0,0,238,
        239,5,109,0,0,239,240,5,95,0,0,240,241,5,114,0,0,241,242,5,101,0,
        0,242,243,5,103,0,0,243,244,5,105,0,0,244,245,5,115,0,0,245,246,
        5,116,0,0,246,247,5,114,0,0,247,249,5,111,0,0,248,36,1,0,0,0,248,
        39,1,0,0,0,248,48,1,0,0,0,248,60,1,0,0,0,248,72,1,0,0,0,248,88,1,
        0,0,0,248,94,1,0,0,0,248,101,1,0,0,0,248,111,1,0,0,0,248,115,1,0,
        0,0,248,128,1,0,0,0,248,137,1,0,0,0,248,144,1,0,0,0,248,148,1,0,
        0,0,248,155,1,0,0,0,248,157,1,0,0,0,248,162,1,0,0,0,248,167,1,0,
        0,0,248,173,1,0,0,0,248,177,1,0,0,0,248,185,1,0,0,0,248,189,1,0,
        0,0,248,193,1,0,0,0,248,196,1,0,0,0,248,200,1,0,0,0,248,208,1,0,
        0,0,248,220,1,0,0,0,248,228,1,0,0,0,248,236,1,0,0,0,249,6,1,0,0,
        0,250,251,5,105,0,0,251,252,5,110,0,0,252,253,5,116,0,0,253,254,
        5,101,0,0,254,255,5,105,0,0,255,256,5,114,0,0,256,275,5,111,0,0,
        257,258,5,108,0,0,258,259,5,105,0,0,259,260,5,116,0,0,260,261,5,
        101,0,0,261,262,5,114,0,0,262,263,5,97,0,0,263,275,5,108,0,0,264,
        265,5,114,0,0,265,266,5,101,0,0,266,267,5,97,0,0,267,275,5,108,0,
        0,268,269,5,108,0,0,269,270,5,111,0,0,270,271,5,103,0,0,271,272,
        5,105,0,0,272,273,5,99,0,0,273,275,5,111,0,0,274,250,1,0,0,0,274,
        257,1,0,0,0,274,264,1,0,0,0,274,268,1,0,0,0,275,8,1,0,0,0,276,280,
        5,34,0,0,277,279,8,2,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,
        5,34,0,0,284,10,1,0,0,0,285,287,7,3,0,0,286,285,1,0,0,0,286,287,
        1,0,0,0,287,289,1,0,0,0,288,290,2,48,57,0,289,288,1,0,0,0,290,291,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,12,1,0,0,0,293,295,7,
        3,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,2,
        48,57,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,
        1,0,0,0,300,307,1,0,0,0,301,303,5,46,0,0,302,304,2,48,57,0,303,302,
        1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,
        1,0,0,0,307,301,1,0,0,0,307,308,1,0,0,0,308,14,1,0,0,0,309,327,7,
        4,0,0,310,311,5,60,0,0,311,327,5,61,0,0,312,313,5,62,0,0,313,327,
        5,61,0,0,314,315,5,60,0,0,315,327,5,62,0,0,316,327,5,61,0,0,317,
        318,5,60,0,0,318,327,5,45,0,0,319,327,5,101,0,0,320,321,5,111,0,
        0,321,327,5,117,0,0,322,323,5,110,0,0,323,324,5,97,0,0,324,327,5,
        111,0,0,325,327,7,5,0,0,326,309,1,0,0,0,326,310,1,0,0,0,326,312,
        1,0,0,0,326,314,1,0,0,0,326,316,1,0,0,0,326,317,1,0,0,0,326,319,
        1,0,0,0,326,320,1,0,0,0,326,322,1,0,0,0,326,325,1,0,0,0,327,16,1,
        0,0,0,328,333,7,6,0,0,329,330,5,46,0,0,330,333,5,46,0,0,331,333,
        5,46,0,0,332,328,1,0,0,0,332,329,1,0,0,0,332,331,1,0,0,0,333,18,
        1,0,0,0,334,338,7,7,0,0,335,337,7,8,0,0,336,335,1,0,0,0,337,340,
        1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,20,1,0,0,0,340,338,1,
        0,0,0,14,0,25,248,274,280,286,291,294,299,305,307,326,332,338,1,
        6,0,0
    ]

class LALexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMENTARIO = 1
    WHITESPACE = 2
    PALAVRA_CHAVE = 3
    TIPO = 4
    CADEIA = 5
    NUM_INT = 6
    NUM_REAL = 7
    OPERADOR = 8
    PONTUACAO = 9
    IDENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
            "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT" ]

    ruleNames = [ "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
                  "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT" ]

    grammarFileName = "LALexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


