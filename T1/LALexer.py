# Generated from LALexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,397,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,5,0,30,8,0,10,0,12,0,33,9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,270,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,296,
        8,3,1,4,1,4,5,4,300,8,4,10,4,12,4,303,9,4,1,4,1,4,1,5,4,5,308,8,
        5,11,5,12,5,309,1,6,4,6,313,8,6,11,6,12,6,314,1,6,1,6,4,6,319,8,
        6,11,6,12,6,320,3,6,323,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,342,8,7,1,8,1,8,1,8,1,8,3,8,
        348,8,8,1,9,1,9,5,9,352,8,9,10,9,12,9,355,9,9,1,10,1,10,1,11,1,11,
        5,11,361,8,11,10,11,12,11,364,9,11,1,11,1,11,1,11,5,11,369,8,11,
        10,11,12,11,372,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,387,8,11,1,12,1,12,5,12,391,8,12,10,12,
        12,12,394,9,12,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,1,0,10,1,0,125,125,3,0,9,10,13,13,
        32,32,2,0,10,10,34,34,7,0,42,43,45,45,47,47,60,60,62,62,91,91,93,
        93,2,0,37,38,94,94,3,0,40,41,44,44,58,58,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,36,36,94,94,125,126,1,0,34,34,451,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,38,1,0,0,0,5,269,
        1,0,0,0,7,295,1,0,0,0,9,297,1,0,0,0,11,307,1,0,0,0,13,312,1,0,0,
        0,15,341,1,0,0,0,17,347,1,0,0,0,19,349,1,0,0,0,21,356,1,0,0,0,23,
        386,1,0,0,0,25,388,1,0,0,0,27,31,5,123,0,0,28,30,8,0,0,0,29,28,1,
        0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,0,0,0,33,
        31,1,0,0,0,34,35,5,125,0,0,35,36,1,0,0,0,36,37,6,0,0,0,37,2,1,0,
        0,0,38,39,7,1,0,0,39,40,1,0,0,0,40,41,6,1,0,0,41,4,1,0,0,0,42,43,
        5,118,0,0,43,44,5,97,0,0,44,270,5,114,0,0,45,46,5,118,0,0,46,47,
        5,101,0,0,47,48,5,114,0,0,48,49,5,100,0,0,49,50,5,97,0,0,50,51,5,
        100,0,0,51,52,5,101,0,0,52,53,5,105,0,0,53,54,5,114,0,0,54,270,5,
        111,0,0,55,56,5,102,0,0,56,57,5,97,0,0,57,58,5,108,0,0,58,59,5,115,
        0,0,59,270,5,111,0,0,60,61,5,99,0,0,61,62,5,111,0,0,62,63,5,110,
        0,0,63,64,5,115,0,0,64,65,5,116,0,0,65,66,5,97,0,0,66,67,5,110,0,
        0,67,68,5,116,0,0,68,270,5,101,0,0,69,70,5,112,0,0,70,71,5,114,0,
        0,71,72,5,111,0,0,72,73,5,99,0,0,73,74,5,101,0,0,74,75,5,100,0,0,
        75,76,5,105,0,0,76,77,5,109,0,0,77,78,5,101,0,0,78,79,5,110,0,0,
        79,80,5,116,0,0,80,270,5,111,0,0,81,82,5,112,0,0,82,83,5,114,0,0,
        83,84,5,111,0,0,84,85,5,99,0,0,85,86,5,101,0,0,86,87,5,100,0,0,87,
        88,5,105,0,0,88,89,5,109,0,0,89,90,5,101,0,0,90,91,5,110,0,0,91,
        92,5,116,0,0,92,270,5,111,0,0,93,94,5,102,0,0,94,95,5,105,0,0,95,
        96,5,109,0,0,96,97,5,95,0,0,97,98,5,112,0,0,98,99,5,114,0,0,99,100,
        5,111,0,0,100,101,5,99,0,0,101,102,5,101,0,0,102,103,5,100,0,0,103,
        104,5,105,0,0,104,105,5,109,0,0,105,106,5,101,0,0,106,107,5,110,
        0,0,107,108,5,116,0,0,108,270,5,111,0,0,109,110,5,102,0,0,110,111,
        5,117,0,0,111,112,5,110,0,0,112,113,5,99,0,0,113,114,5,97,0,0,114,
        270,5,111,0,0,115,116,5,114,0,0,116,117,5,101,0,0,117,118,5,116,
        0,0,118,119,5,111,0,0,119,120,5,114,0,0,120,121,5,110,0,0,121,270,
        5,101,0,0,122,123,5,102,0,0,123,124,5,105,0,0,124,125,5,109,0,0,
        125,126,5,95,0,0,126,127,5,102,0,0,127,128,5,117,0,0,128,129,5,110,
        0,0,129,130,5,99,0,0,130,131,5,97,0,0,131,270,5,111,0,0,132,133,
        5,116,0,0,133,134,5,105,0,0,134,135,5,112,0,0,135,270,5,111,0,0,
        136,137,5,102,0,0,137,138,5,105,0,0,138,139,5,109,0,0,139,140,5,
        95,0,0,140,141,5,97,0,0,141,142,5,108,0,0,142,143,5,103,0,0,143,
        144,5,111,0,0,144,145,5,114,0,0,145,146,5,105,0,0,146,147,5,116,
        0,0,147,148,5,109,0,0,148,270,5,111,0,0,149,150,5,97,0,0,150,151,
        5,108,0,0,151,152,5,103,0,0,152,153,5,111,0,0,153,154,5,114,0,0,
        154,155,5,105,0,0,155,156,5,116,0,0,156,157,5,109,0,0,157,270,5,
        111,0,0,158,159,5,100,0,0,159,160,5,101,0,0,160,161,5,99,0,0,161,
        162,5,108,0,0,162,163,5,97,0,0,163,164,5,114,0,0,164,270,5,101,0,
        0,165,166,5,108,0,0,166,167,5,101,0,0,167,168,5,105,0,0,168,270,
        5,97,0,0,169,170,5,101,0,0,170,171,5,115,0,0,171,172,5,99,0,0,172,
        173,5,114,0,0,173,174,5,101,0,0,174,175,5,118,0,0,175,270,5,97,0,
        0,176,177,5,115,0,0,177,270,5,101,0,0,178,179,5,115,0,0,179,180,
        5,101,0,0,180,181,5,110,0,0,181,182,5,97,0,0,182,270,5,111,0,0,183,
        184,5,101,0,0,184,185,5,110,0,0,185,186,5,116,0,0,186,187,5,97,0,
        0,187,270,5,111,0,0,188,189,5,102,0,0,189,190,5,105,0,0,190,191,
        5,109,0,0,191,192,5,95,0,0,192,193,5,115,0,0,193,270,5,101,0,0,194,
        195,5,99,0,0,195,196,5,97,0,0,196,197,5,115,0,0,197,270,5,111,0,
        0,198,199,5,102,0,0,199,200,5,105,0,0,200,201,5,109,0,0,201,202,
        5,95,0,0,202,203,5,99,0,0,203,204,5,97,0,0,204,205,5,115,0,0,205,
        270,5,111,0,0,206,207,5,115,0,0,207,208,5,101,0,0,208,209,5,106,
        0,0,209,270,5,97,0,0,210,211,5,112,0,0,211,212,5,97,0,0,212,213,
        5,114,0,0,213,270,5,97,0,0,214,215,5,97,0,0,215,216,5,116,0,0,216,
        270,5,101,0,0,217,218,5,102,0,0,218,219,5,97,0,0,219,220,5,99,0,
        0,220,270,5,97,0,0,221,222,5,102,0,0,222,223,5,105,0,0,223,224,5,
        109,0,0,224,225,5,95,0,0,225,226,5,112,0,0,226,227,5,97,0,0,227,
        228,5,114,0,0,228,270,5,97,0,0,229,230,5,102,0,0,230,231,5,105,0,
        0,231,232,5,109,0,0,232,233,5,95,0,0,233,234,5,101,0,0,234,235,5,
        110,0,0,235,236,5,113,0,0,236,237,5,117,0,0,237,238,5,97,0,0,238,
        239,5,110,0,0,239,240,5,116,0,0,240,270,5,111,0,0,241,242,5,101,
        0,0,242,243,5,110,0,0,243,244,5,113,0,0,244,245,5,117,0,0,245,246,
        5,97,0,0,246,247,5,110,0,0,247,248,5,116,0,0,248,270,5,111,0,0,249,
        250,5,114,0,0,250,251,5,101,0,0,251,252,5,103,0,0,252,253,5,105,
        0,0,253,254,5,115,0,0,254,255,5,116,0,0,255,256,5,114,0,0,256,270,
        5,111,0,0,257,258,5,102,0,0,258,259,5,105,0,0,259,260,5,109,0,0,
        260,261,5,95,0,0,261,262,5,114,0,0,262,263,5,101,0,0,263,264,5,103,
        0,0,264,265,5,105,0,0,265,266,5,115,0,0,266,267,5,116,0,0,267,268,
        5,114,0,0,268,270,5,111,0,0,269,42,1,0,0,0,269,45,1,0,0,0,269,55,
        1,0,0,0,269,60,1,0,0,0,269,69,1,0,0,0,269,81,1,0,0,0,269,93,1,0,
        0,0,269,109,1,0,0,0,269,115,1,0,0,0,269,122,1,0,0,0,269,132,1,0,
        0,0,269,136,1,0,0,0,269,149,1,0,0,0,269,158,1,0,0,0,269,165,1,0,
        0,0,269,169,1,0,0,0,269,176,1,0,0,0,269,178,1,0,0,0,269,183,1,0,
        0,0,269,188,1,0,0,0,269,194,1,0,0,0,269,198,1,0,0,0,269,206,1,0,
        0,0,269,210,1,0,0,0,269,214,1,0,0,0,269,217,1,0,0,0,269,221,1,0,
        0,0,269,229,1,0,0,0,269,241,1,0,0,0,269,249,1,0,0,0,269,257,1,0,
        0,0,270,6,1,0,0,0,271,272,5,105,0,0,272,273,5,110,0,0,273,274,5,
        116,0,0,274,275,5,101,0,0,275,276,5,105,0,0,276,277,5,114,0,0,277,
        296,5,111,0,0,278,279,5,108,0,0,279,280,5,105,0,0,280,281,5,116,
        0,0,281,282,5,101,0,0,282,283,5,114,0,0,283,284,5,97,0,0,284,296,
        5,108,0,0,285,286,5,114,0,0,286,287,5,101,0,0,287,288,5,97,0,0,288,
        296,5,108,0,0,289,290,5,108,0,0,290,291,5,111,0,0,291,292,5,103,
        0,0,292,293,5,105,0,0,293,294,5,99,0,0,294,296,5,111,0,0,295,271,
        1,0,0,0,295,278,1,0,0,0,295,285,1,0,0,0,295,289,1,0,0,0,296,8,1,
        0,0,0,297,301,5,34,0,0,298,300,8,2,0,0,299,298,1,0,0,0,300,303,1,
        0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,301,1,
        0,0,0,304,305,5,34,0,0,305,10,1,0,0,0,306,308,2,48,57,0,307,306,
        1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,12,1,
        0,0,0,311,313,2,48,57,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,322,1,0,0,0,316,318,5,46,0,0,317,319,
        2,48,57,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,
        1,0,0,0,321,323,1,0,0,0,322,316,1,0,0,0,322,323,1,0,0,0,323,14,1,
        0,0,0,324,342,7,3,0,0,325,326,5,60,0,0,326,342,5,61,0,0,327,328,
        5,62,0,0,328,342,5,61,0,0,329,330,5,60,0,0,330,342,5,62,0,0,331,
        342,5,61,0,0,332,333,5,60,0,0,333,342,5,45,0,0,334,342,5,101,0,0,
        335,336,5,111,0,0,336,342,5,117,0,0,337,338,5,110,0,0,338,339,5,
        97,0,0,339,342,5,111,0,0,340,342,7,4,0,0,341,324,1,0,0,0,341,325,
        1,0,0,0,341,327,1,0,0,0,341,329,1,0,0,0,341,331,1,0,0,0,341,332,
        1,0,0,0,341,334,1,0,0,0,341,335,1,0,0,0,341,337,1,0,0,0,341,340,
        1,0,0,0,342,16,1,0,0,0,343,348,7,5,0,0,344,345,5,46,0,0,345,348,
        5,46,0,0,346,348,2,45,46,0,347,343,1,0,0,0,347,344,1,0,0,0,347,346,
        1,0,0,0,348,18,1,0,0,0,349,353,7,6,0,0,350,352,7,7,0,0,351,350,1,
        0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,20,1,0,
        0,0,355,353,1,0,0,0,356,357,7,8,0,0,357,22,1,0,0,0,358,362,5,123,
        0,0,359,361,8,0,0,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,
        0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,362,1,0,0,0,365,387,5,123,
        0,0,366,370,5,123,0,0,367,369,8,0,0,0,368,367,1,0,0,0,369,372,1,
        0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,1,
        0,0,0,373,374,5,102,0,0,374,375,5,105,0,0,375,376,5,109,0,0,376,
        377,5,95,0,0,377,378,5,97,0,0,378,379,5,108,0,0,379,380,5,103,0,
        0,380,381,5,111,0,0,381,382,5,114,0,0,382,383,5,105,0,0,383,384,
        5,116,0,0,384,385,5,109,0,0,385,387,5,111,0,0,386,358,1,0,0,0,386,
        366,1,0,0,0,387,24,1,0,0,0,388,392,5,34,0,0,389,391,8,9,0,0,390,
        389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,
        395,1,0,0,0,394,392,1,0,0,0,395,396,5,10,0,0,396,26,1,0,0,0,16,0,
        31,269,295,301,309,314,320,322,341,347,353,362,370,386,392,1,6,0,
        0
    ]

class LALexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMENTARIO = 1
    WHITESPACE = 2
    PALAVRA_CHAVE = 3
    TIPO = 4
    CADEIA = 5
    NUM_INT = 6
    NUM_REAL = 7
    OPERADOR = 8
    PONTUACAO = 9
    IDENT = 10
    ERRO = 11
    ERRO_COMENTARIO = 12
    ERRO_STRING = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
            "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT", "ERRO", 
            "ERRO_COMENTARIO", "ERRO_STRING" ]

    ruleNames = [ "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
                  "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT", 
                  "ERRO", "ERRO_COMENTARIO", "ERRO_STRING" ]

    grammarFileName = "LALexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


