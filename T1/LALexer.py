# Generated from LALexer.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,24,8,0,10,0,12,0,27,
        9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,142,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,168,8,3,
        1,4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,1,4,1,5,3,5,180,8,5,1,
        5,4,5,183,8,5,11,5,12,5,184,1,6,3,6,188,8,6,1,6,4,6,191,8,6,11,6,
        12,6,192,1,6,1,6,4,6,197,8,6,11,6,12,6,198,3,6,201,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,219,8,
        7,1,8,1,8,1,8,3,8,224,8,8,1,9,1,9,5,9,228,8,9,10,9,12,9,231,9,9,
        0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,8,1,0,125,
        125,3,0,9,10,13,13,32,32,1,0,34,34,2,0,43,43,45,45,5,0,42,43,45,
        45,47,47,60,60,62,62,3,0,40,41,44,44,58,58,2,0,65,90,97,122,3,0,
        48,57,65,90,97,122,268,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,32,1,0,0,0,5,141,1,0,0,0,7,167,
        1,0,0,0,9,169,1,0,0,0,11,179,1,0,0,0,13,187,1,0,0,0,15,218,1,0,0,
        0,17,223,1,0,0,0,19,225,1,0,0,0,21,25,5,123,0,0,22,24,8,0,0,0,23,
        22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,28,1,0,0,
        0,27,25,1,0,0,0,28,29,5,125,0,0,29,30,1,0,0,0,30,31,6,0,0,0,31,2,
        1,0,0,0,32,33,7,1,0,0,33,34,1,0,0,0,34,35,6,1,0,0,35,4,1,0,0,0,36,
        37,5,102,0,0,37,38,5,105,0,0,38,39,5,109,0,0,39,40,5,95,0,0,40,41,
        5,97,0,0,41,42,5,108,0,0,42,43,5,103,0,0,43,44,5,111,0,0,44,45,5,
        114,0,0,45,46,5,105,0,0,46,47,5,116,0,0,47,48,5,109,0,0,48,142,5,
        111,0,0,49,50,5,97,0,0,50,51,5,108,0,0,51,52,5,103,0,0,52,53,5,111,
        0,0,53,54,5,114,0,0,54,55,5,105,0,0,55,56,5,116,0,0,56,57,5,109,
        0,0,57,142,5,111,0,0,58,59,5,100,0,0,59,60,5,101,0,0,60,61,5,99,
        0,0,61,62,5,108,0,0,62,63,5,97,0,0,63,64,5,114,0,0,64,142,5,101,
        0,0,65,66,5,108,0,0,66,67,5,101,0,0,67,68,5,105,0,0,68,142,5,97,
        0,0,69,70,5,101,0,0,70,71,5,115,0,0,71,72,5,99,0,0,72,73,5,114,0,
        0,73,74,5,101,0,0,74,75,5,118,0,0,75,142,5,97,0,0,76,77,5,115,0,
        0,77,142,5,101,0,0,78,79,5,115,0,0,79,80,5,101,0,0,80,81,5,110,0,
        0,81,82,5,97,0,0,82,142,5,111,0,0,83,84,5,101,0,0,84,85,5,110,0,
        0,85,86,5,116,0,0,86,87,5,97,0,0,87,142,5,111,0,0,88,89,5,102,0,
        0,89,90,5,105,0,0,90,91,5,109,0,0,91,92,5,95,0,0,92,93,5,115,0,0,
        93,142,5,101,0,0,94,95,5,99,0,0,95,96,5,97,0,0,96,97,5,115,0,0,97,
        142,5,111,0,0,98,99,5,102,0,0,99,100,5,105,0,0,100,101,5,109,0,0,
        101,102,5,95,0,0,102,103,5,99,0,0,103,104,5,97,0,0,104,105,5,115,
        0,0,105,142,5,111,0,0,106,107,5,115,0,0,107,108,5,101,0,0,108,109,
        5,106,0,0,109,142,5,97,0,0,110,111,5,112,0,0,111,112,5,97,0,0,112,
        113,5,114,0,0,113,142,5,97,0,0,114,115,5,97,0,0,115,116,5,116,0,
        0,116,142,5,101,0,0,117,118,5,102,0,0,118,119,5,97,0,0,119,120,5,
        99,0,0,120,142,5,97,0,0,121,122,5,102,0,0,122,123,5,105,0,0,123,
        124,5,109,0,0,124,125,5,95,0,0,125,126,5,112,0,0,126,127,5,97,0,
        0,127,128,5,114,0,0,128,142,5,97,0,0,129,130,5,102,0,0,130,131,5,
        105,0,0,131,132,5,109,0,0,132,133,5,95,0,0,133,134,5,101,0,0,134,
        135,5,110,0,0,135,136,5,113,0,0,136,137,5,117,0,0,137,138,5,97,0,
        0,138,139,5,110,0,0,139,140,5,116,0,0,140,142,5,111,0,0,141,36,1,
        0,0,0,141,49,1,0,0,0,141,58,1,0,0,0,141,65,1,0,0,0,141,69,1,0,0,
        0,141,76,1,0,0,0,141,78,1,0,0,0,141,83,1,0,0,0,141,88,1,0,0,0,141,
        94,1,0,0,0,141,98,1,0,0,0,141,106,1,0,0,0,141,110,1,0,0,0,141,114,
        1,0,0,0,141,117,1,0,0,0,141,121,1,0,0,0,141,129,1,0,0,0,142,6,1,
        0,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,116,0,0,146,
        147,5,101,0,0,147,148,5,105,0,0,148,149,5,114,0,0,149,168,5,111,
        0,0,150,151,5,108,0,0,151,152,5,105,0,0,152,153,5,116,0,0,153,154,
        5,101,0,0,154,155,5,114,0,0,155,156,5,97,0,0,156,168,5,108,0,0,157,
        158,5,114,0,0,158,159,5,101,0,0,159,160,5,97,0,0,160,168,5,108,0,
        0,161,162,5,108,0,0,162,163,5,111,0,0,163,164,5,103,0,0,164,165,
        5,105,0,0,165,166,5,99,0,0,166,168,5,111,0,0,167,143,1,0,0,0,167,
        150,1,0,0,0,167,157,1,0,0,0,167,161,1,0,0,0,168,8,1,0,0,0,169,173,
        5,34,0,0,170,172,8,2,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,
        1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,
        5,34,0,0,177,10,1,0,0,0,178,180,7,3,0,0,179,178,1,0,0,0,179,180,
        1,0,0,0,180,182,1,0,0,0,181,183,2,48,57,0,182,181,1,0,0,0,183,184,
        1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,12,1,0,0,0,186,188,7,
        3,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,191,2,
        48,57,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,
        1,0,0,0,193,200,1,0,0,0,194,196,5,46,0,0,195,197,2,48,57,0,196,195,
        1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,
        1,0,0,0,200,194,1,0,0,0,200,201,1,0,0,0,201,14,1,0,0,0,202,219,7,
        4,0,0,203,204,5,60,0,0,204,219,5,61,0,0,205,206,5,62,0,0,206,219,
        5,61,0,0,207,208,5,60,0,0,208,219,5,62,0,0,209,219,5,61,0,0,210,
        211,5,60,0,0,211,219,5,45,0,0,212,219,5,101,0,0,213,214,5,111,0,
        0,214,219,5,117,0,0,215,216,5,110,0,0,216,217,5,97,0,0,217,219,5,
        111,0,0,218,202,1,0,0,0,218,203,1,0,0,0,218,205,1,0,0,0,218,207,
        1,0,0,0,218,209,1,0,0,0,218,210,1,0,0,0,218,212,1,0,0,0,218,213,
        1,0,0,0,218,215,1,0,0,0,219,16,1,0,0,0,220,224,7,5,0,0,221,222,5,
        46,0,0,222,224,5,46,0,0,223,220,1,0,0,0,223,221,1,0,0,0,224,18,1,
        0,0,0,225,229,7,6,0,0,226,228,7,7,0,0,227,226,1,0,0,0,228,231,1,
        0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,20,1,0,0,0,231,229,1,0,
        0,0,14,0,25,141,167,173,179,184,187,192,198,200,218,223,229,1,6,
        0,0
    ]

class LALexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMENTARIO = 1
    WHITESPACE = 2
    PALAVRA_CHAVE = 3
    TIPO = 4
    CADEIA = 5
    NUM_INT = 6
    NUM_REAL = 7
    OPERADOR = 8
    PONTUACAO = 9
    IDENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
            "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT" ]

    ruleNames = [ "COMENTARIO", "WHITESPACE", "PALAVRA_CHAVE", "TIPO", "CADEIA", 
                  "NUM_INT", "NUM_REAL", "OPERADOR", "PONTUACAO", "IDENT" ]

    grammarFileName = "LALexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


